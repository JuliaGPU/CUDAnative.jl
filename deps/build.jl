# discovering binary CUDA dependencies

using Pkg, Pkg.Artifacts
using CUDAapi, CUDAdrv
using LLVM


## discovery

# NOTE: we don't use autogenerated JLLs, because we have multiple artifacts and need to
#       decide ourselves (i.e. not via package dependencies) which one to use.
const cuda_artifacts = Dict(
    v"10.2" => ()->artifact"CUDA10.2",
    v"10.1" => ()->artifact"CUDA10.1",
    v"10.0" => ()->artifact"CUDA10.0",
    v"9.2"  => ()->artifact"CUDA9.2",
    v"9.0"  => ()->artifact"CUDA9.0",
)

# try use CUDA from an artifact
function use_artifact_cuda()
    config = Dict{Symbol,Any}()

    if !parse(Bool, get(ENV, "JULIA_CUDA_USE_BINARYBUILDER", "true"))
        @warn "Use of CUDA artifacts not allowed by user"
        return
    end

    # select compatible artifacts
    if haskey(ENV, "JULIA_CUDA_VERSION")
        wanted_version = VersionNumber(ENV["JULIA_CUDA_VERSION"])
        filter!(((version,artifact),) -> version == wanted_version, cuda_artifacts)
    else
        if !CUDAdrv.functional()
            @error "CUDAdrv.jl is not functional, cannot select a compatible artifact."
            return
        end
        driver_version = CUDAdrv.release()
        filter!(((version,artifact),) -> version <= driver_version, cuda_artifacts)
    end

    # download and install
    artifact = nothing
    for release in sort(collect(keys(cuda_artifacts)); rev=true)
        try
            artifact = cuda_artifacts[release]()
            config[:toolkit_release] = release
            break
        catch
        end
    end
    if artifact == nothing
        @error "Could not find a compatible artifact."
        return
    end
    config[:toolkit_dirs] = [artifact]

    # utilities to look up stuff in the artifact (at known locations, so not using CUDAapi)
    get_binary(name) = joinpath(artifact, "bin", Sys.iswindows() ? "$name.exe" : name)
    function get_library(name)
        filename = if Sys.iswindows()
            "$name.dll"
        elseif Sys.isapple()
            "lib$name.dylib"
        else
            "lib$name.so"
        end
        joinpath(artifact, Sys.iswindows() ? "bin" : "lib", filename)
    end
    get_static_library(name) = joinpath(artifact, "lib", Sys.iswindows() ? "$name.lib" : "lib$name.a")
    get_file(path) = joinpath(artifact, path)

    config[:nvdisasm] = get_binary("nvdisasm")
    @assert isfile(config[:nvdisasm])
    config[:toolkit_version] = parse_toolkit_version(config[:nvdisasm])

    # Windows libraries are tagged with the CUDA release
    long = "$(config[:toolkit_release].major)$(config[:toolkit_release].minor)"
    short = config[:toolkit_release] >= v"10.1" ? string(config[:toolkit_release].major) : long

    config[:libcupti] = get_library(Sys.iswindows() ? "cupti64_$long" : "cupti")
    config[:libnvtx] = get_library(Sys.iswindows() ? "nvToolsExt64_1" : "nvToolsExt")

    config[:libcudadevrt] = get_static_library("cudadevrt")
    @assert isfile(config[:libcudadevrt])
    config[:libdevice] = get_file(joinpath("share", "libdevice", "libdevice.10.bc"))
    @assert isfile(config[:libdevice])

    @info "Using CUDA $(config[:toolkit_version]) from an artifact at $(join(config[:toolkit_dirs], ", "))"
    return config
end

# try to use CUDA from a local installation (which does not have to be functional)
function use_local_cuda()
    config = Dict{Symbol,Any}()

    dirs = find_toolkit()
    config[:toolkit_dirs] = dirs

    config[:nvdisasm] = find_cuda_binary("nvdisasm")
    if config[:nvdisasm] === nothing
        @error "Could not find nvdisasm"
        return
    end
    config[:toolkit_version] = parse_toolkit_version(config[:nvdisasm])
    config[:toolkit_release] = VersionNumber(config[:toolkit_version].major, config[:toolkit_version].minor)

    cupti_dirs = map(dir->joinpath(dir, "extras", "CUPTI"), dirs) |> x->filter(isdir,x)
    config[:libcupti] = find_cuda_library("cupti", [dirs; cupti_dirs], [config[:toolkit_version]])
    config[:libnvtx] = find_cuda_library("nvtx", dirs, [v"1"])

    config[:libcudadevrt] = find_libcudadevrt(dirs)
    if config[:libcudadevrt] === nothing
        @error "Could not find libcudadevrt"
        return
    end
    config[:libdevice] = find_libdevice(dirs)
    if config[:libdevice] === nothing
        @error "Could not find libdevice"
        return
    end

    @info "Found local CUDA $(config[:toolkit_version]) at $(join(config[:toolkit_dirs], ", "))"
    return config
end


## main

const config_path = joinpath(@__DIR__, "deps.jl")

function write_deps(config, path)
    open(path, "w") do io
        println(io, "# autogenerated file, do not edit")
        for (key,val) in config
            println(io, "const $key = $(repr(val))")
        end
    end
end

function main()
    # initial state
    ispath(config_path) && rm(config_path; force=true)
    config = Dict{Symbol,Any}(:configured => false,
        :libcupti => nothing, :libnvtx => nothing)   # actual values for ccall codegen
    write_deps(config, config_path)

    if Base.libllvm_version != LLVM.version()
        error("LLVM $(LLVM.version()) incompatible with Julia's LLVM $(Base.libllvm_version)")
    end

    @info "Trying to use artifacts..."
    config = use_artifact_cuda()

    if config === nothing
        @info "Trying to use local installation..."
        config = use_local_cuda()
    end

    # successful configuration
    if config !== nothing
        config[:configured] = true
        write_deps(config, config_path)
    else
        @error "Could not find a suitable CUDA installation"
    end

    return
end

main()
